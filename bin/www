#!/usr/bin/env node

require('dotenv').config();

/**
 * Module dependencies.
 */

const https = require('https');
const http = require('http');
const fs = require('fs');
const path = require('path');

const { app, publicApp, certBot } = require('../app');

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const normPort = parseInt(val, 10);

  if (Number.isNaN(normPort)) {
    // named pipe
    return val;
  }

  if (normPort >= 0) {
    // port number
    return normPort;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */

const adminPort = normalizePort(process.env.APP_PORT || '3000');
const publicPort = normalizePort(process.env.PUBLIC_PORT || '3001');
const certBotPort = normalizePort(process.env.CERTBOT_PORT || '3002');

app.set('port', adminPort);
publicApp.set('port', publicPort);
certBot.set('port', certBotPort);

/**
 * Event listener for HTTP server "error" event.
 */

function onErrorAdmin(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${adminPort}` : `Port ${adminPort}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onErrorPublic(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${publicPort}` : `Port ${publicPort}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Create HTTP server.
 */

const URL = require('url');
const myDomain = URL.parse(process.env.PUBLIC_URL)

const privateKey = fs.readFileSync(`/etc/letsencrypt/live/${myDomain.host}/privkey.pem`);
const certificate = fs.readFileSync(`/etc/letsencrypt/live/${myDomain.host}/fullchain.pem`);

const serverApp = https.createServer(
  {
    key: privateKey,
    cert: certificate,
  },
  app
);

const serverPublic = https.createServer(
  {
    key: privateKey,
    cert: certificate,
  },
  publicApp
);

const serverCertBot = http.createServer(certBot);

/**
 * Listen on provided port, on all network interfaces.
 */

serverApp.listen(adminPort);
serverApp.on('error', onErrorAdmin);

serverPublic.listen(publicPort);
serverPublic.on('error', onErrorPublic);

serverCertBot.listen(certBotPort);
serverPublic.on('error', onErrorPublic);
